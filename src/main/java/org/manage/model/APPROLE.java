package org.manage.model;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.IAtom;
import com.jfinal.plugin.activerecord.Page;
import org.manage.model.base.BaseAPPROLE;
import org.manage.util.Pager;
import org.manage.util.Pagination;
import org.manage.util.SqlBuilder;
import org.manage.util.Strings;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class APPROLE extends BaseAPPROLE<APPROLE> {
	public static final APPROLE dao = new APPROLE().dao();

	public List<APPROLE> getAppRoleList() {
		String sql = "select * from APPROLE where DELFLAG=0 order by ROLEID";
		List<APPROLE> approleList = APPROLE.dao.find(sql);
		return approleList;
	}
	public Map<String, Object> getListPage(Map<String, String> params) {

		String sqlFrom = "from APPROLE where DELFLAG=0 ";
		Map<String,Object> retMap = new HashMap<>();
		SqlBuilder sqlBuilder = new SqlBuilder(null);
		sqlBuilder.addCondition("RoleName", SqlBuilder.Condition.LIKE,params.get("RoleName"));
		String sql = sqlBuilder.build();
		sqlFrom+=sql;
		System.out.println(sqlFrom);
		Object[] pars = sqlBuilder.paras();
		Page<APPROLE> page = Pagination.JPaginate(params,APPROLE.dao,"select *",sqlFrom+"order by roleid",pars);
		retMap = Pager.PageMap(params,page);
		return retMap;
	}
	public Map<String, Object> roleDelete(String roleID) {
		Map<String, Object> retMap = new HashMap<String, Object>();
		int rId=Integer.parseInt(roleID);
		boolean success = Db.tx(new IAtom() {
			@Override
			public boolean run() throws SQLException {
				try {
					Db.update("delete from APPROLE where ROLEID=?",rId);
					Db.update("delete from APPROLE_MENU where ROLEID=?",rId);
					Db.update("delete from APPUSER_ROLE where ROLEID=?",rId);

				}catch (Exception e){
					e.printStackTrace();
					return false;
				}
				return true;
			}
		});
		if (success){
			retMap.put("code", 1);
		}else {
			retMap.put("code",-1);
		}

		return retMap;
	}
	public APPROLE getRole(String roleID) {
		String sql = "select ROLENAME from APPROLE where ROLEID=? and DELFLAG=0";
		APPROLE approle = APPROLE.dao.findFirst(sql, Integer.parseInt(roleID));
		return approle;
	}
	public Map<String, Object> roleSave(String roleID, String roleName) {
		Map<String, Object> retMap = new HashMap<String, Object>();
		if (!Strings.isNullOrEmpty(roleID)) {
			String sql = "update APPROLE set ROLENAME=? where ROLEID=?";
			Db.update(sql, roleName, Integer.parseInt(roleID));
		} else {
			String sql = "insert into APPROLE (ROLENAME) values (?)";
			Db.update(sql, roleName);
		}
		retMap.put("code", 1);
		retMap.put("msg", "");
		return retMap;
	}
}
