package org.manage.model;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.IAtom;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import org.manage.model.base.BaseAPPUSER;
import org.manage.util.Pager;
import org.manage.util.Pagination;
import org.manage.util.SqlBuilder;

import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class APPUSER extends BaseAPPUSER<APPUSER> {
	public static final APPUSER dao = new APPUSER().dao();

	/**
	 * @param name     登录用户名
	 * @param password 登录密码
	 * @return
	 */
	public APPUSER checkLogin(String name, String password) {
		APPUSER appuser = APPUSER.dao.findFirst("select * from APPUSER where DELFLAG=? and  loginname=? and password=?", 0,name, password);
		return appuser;
	}
	public Map<String,Object> getUserList(Map<String,String> params){
		Map<String,Object> retMap = new HashMap<>();
		String sqlFrom = "from APPUSER a left join APPUSERTYPE b on a.USERTYPEID=b.USERTYPEID where a.DELFLAG=0";
		SqlBuilder sqlBuilder = new SqlBuilder(null);
		sqlBuilder.addCondition("a","LOGINNAME", SqlBuilder.Condition.LIKE,params.get("LoginName"));
		sqlBuilder.addCondition("a","USERTYPEID", SqlBuilder.Condition.EQ,params.get("USERTYPEID"));
		String sql = sqlBuilder.build();
		Object[] pars = sqlBuilder.paras();
		sqlFrom+=sql;
		Page<Record> recordPage = Pagination.JPaginate(params,"select a.*,b.USERTYPENAME",sqlFrom,pars);
		retMap = Pager.PageMap(params,recordPage);
		return retMap;
	}
	public APPUSER getUser(String userID) {
		String sql = "select * from APPUSER where USERID=?";
		APPUSER appuser = APPUSER.dao.findFirst(sql, userID);
		return appuser;
	}
	public Map<String, Object> stopUser(String userid) {
		HashMap<String, Object> retMap = new HashMap<String, Object>();
		try {
			APPUSER appuser = dao.findById(userid);
			if (appuser.getUSERSTATUS() == 0) {
				appuser.setUSERSTATUS(1);
			} else {
				appuser.setUSERSTATUS(0);
			}
			appuser.update();
			retMap.put("code", 1);
		} catch (Exception e) {
			retMap.put("code", -1);
			retMap.put("msg", "STOP USE FAIL!");
		}
		return retMap;
	}
	public int loginCheck(APPUSER appuser, String loginName) {
		String sql = "select count(*) from APPUSER WHERE LOGINNAME =? and USERID !=?";
		int count = Db.queryInt(sql, loginName, appuser.getUSERID());
		return count;
	}

	public Map<String, Object> saveUserAndInfo_e(APPUSER appuser, String loginName, String passWord, String userID, Integer sex, String address, String tel, String email, String name) {
		Map<String, Object> retMap = new HashMap<String, Object>();
		if (userID.equals("")) {
			SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			String dateFormat = df.format(new Date());
			String inuserId = appuser.getUSERID();
			String uuid = UUID.randomUUID().toString().replace("-", "");
			String uuid1 = UUID.randomUUID().toString().replace("-", "");
			APPUSERINFO appuserinfo = new APPUSERINFO();
			appuserinfo.setUSERID(uuid);
			appuserinfo.setNAME(name);
			appuserinfo.setSEX(sex);
			appuserinfo.setADDRESS(address);
			appuserinfo.setTEL(tel);
			appuserinfo.setEMAIL(email);
			appuserinfo.setINUSERID(inuserId);
			appuserinfo.set("INDATE", dateFormat);


			APPUSER appuser1 = new APPUSER();
			appuser1.setUSERID(uuid1);
			appuser1.setLOGINNAME(loginName);
			appuser1.setREALNAME(name);
			appuser1.setPASSWORD(passWord);
			appuser1.setUSERSTATUS(0);
			appuser1.setUSERTYPEID(1);
			appuser1.setMAPID(uuid);

			Db.tx(new IAtom() {
				@Override
				public boolean run() throws SQLException {
					boolean bol1 = appuserinfo.save();
					boolean bol2 = appuser1.save();
					return bol1&&bol2;
				}
			});
			retMap.put("code", 1);
			retMap.put("msg", "");

		} else {
			SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			String dateFormat = df.format(new Date());
			String inuserId = appuser.getUSERID();
			APPUSERINFO appuserinfo = new APPUSERINFO();
			appuserinfo.setUSERID(userID);
			appuserinfo.setNAME(name);
			appuserinfo.setSEX(sex);
			appuserinfo.setADDRESS(address);
			appuserinfo.setTEL(tel);
			appuserinfo.setEMAIL(email);
			appuserinfo.setINUSERID(inuserId);
			appuserinfo.set("INDATE", dateFormat);
			Db.tx(new IAtom() {
				@Override
				public boolean run() throws SQLException {
					boolean upflag = appuserinfo.update();
					APPUSER appuser1 = dao.findFirst("select * from APPUSER where MAPID=?", appuserinfo.getUSERID());
					appuser1.setREALNAME(appuserinfo.getNAME());
					boolean upflag1 = appuser1.update();
					return upflag&&upflag1;
				}
			});
			retMap.put("code", 1);
			retMap.put("msg", "");
		}
		return retMap;
	}
	public Map<String,Object> resetPw(String userId){
		Map<String,Object> retMap = new HashMap<>();
		String sqlStr = "update APPUSER set PASSWORD=? where USERID=?";
		if (Db.update(sqlStr,"88888888",userId) >0){
			retMap.put("code",1);
			retMap.put("msg","reset success");
		}else {
			retMap.put("code",-1);
			retMap.put("msg","reset fail");
		}
		return retMap;
	}
	public List<APPUSER> getLName(){
		List<APPUSER> list = dao.find("select USERID,LOGINNAME from APPUSER");
		return list;
	}
}
